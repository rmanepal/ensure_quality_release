# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'bde9a17c-0006-4202-a1ed-14f03d0557fe'
  
  # Azure subscription
  azureSubscription: 'Azure subscription 1 (ef797a3b-ebc6-4c45-a0f0-817c4447b0ef)'

  # Web app name
  webAppName: 'webapp-api-AppService'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # azure deployment vm image name
  myvmImageName: 'myLinuxVM'

  # Environment name
  environmentName: 'webapp-api-AppService'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  
  # Python version: 3.7
  pythonVersion: '3.7'

  # postman resource folder
  postman: 'postman'
  postman_tests_json: 'post-man-tests.postman_collection.json'


  # source fake rest api app file
  fakerestapiapp: 'app.zip'

  # selenium folder
  selenium: 'selenium'
  
  # jmeter folder
  jmeter: 'jmeter'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - script: |
          sudo npm install -g newman --unsafe-perm=true --allow-root
          export PATH="/home/vsts/.local/bin:$PATH"
      workingDirectory: '$(build.sourcesdirectory)'
      displayName: 'Install npm on Command Line Script'

    - script: |
          ls
          newman run '$(postman)/$(postman_tests_json)' --reporters cli,junit --reporter-junit-export junitStarterApiReport.xml
          ls
      workingDirectory: '$(build.sourcesdirectory)'
      displayName: 'Run postman tests'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: 'junit*.xml'
        testResultsFormat: 'JUnit'
        testRunTitle: 'Postman API Test'
        searchFolder: '$(build.sourcesdirectory)'
        mergeTestResults: false
        publishRunAttachments: true 


    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    
    - upload: '$(build.sourcesdirectory)/$(fakerestapiapp)'
      displayName: 'Upload package fakrest api'
      artifact: drop

    - upload: '$(build.sourcesdirectory)/$(selenium)'
      displayName: 'Upload selenium folder'
      artifact: selenium

    - upload: '$(build.sourcesdirectory)/$(jmeter)'
      displayName: 'Upload Jmeter scripts and csv files'
      artifact: jmeter
    
- stage: Deploy
  displayName: 'Deployment stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJobFakeRestAPI
    pool:
      vmImage: $(vmImageName)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy fake rest api on azure App Service'
            inputs:
              azureSubscription: $(azureSubscription)
              WebAppName: $(webAppName)
              packageForLinux: '$(Pipeline.Workspace)/drop/$(fakerestapiapp)'
              enableCustomDeployment: true
              DeploymentType: runFromZip


  - deployment: DeploySeleniumOnVM
    displayName: 'Deploy Selenium on VM'
    environment:
      name: $(myvmImageName) 
      resourceType: VirtualMachine
      tags: 'test'

    strategy:
      runOnce:
        deploy:  
          steps:  
          - task: Bash@3
            inputs: 
              targetType: 'inline'
              workingDirectory: '/home/azureuser'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y 
                sudo apt-get update -y
                sudo apt-get install python3-pip -y 
                sudo apt-get install unzip -y
                sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo dpkg -i google-chrome-stable_current_amd64.deb
                sudo apt-get -f install -y
                sudo apt-get install -y unzip xvfb libxi6 libgconf-2-4
                sudo wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                sudo unzip chromedriver_linux64.zip
                sudo mv chromedriver /home/azureuser/chromedriver
                sudo apt install python3-pip
                sudo apt-get install -y chromium-browser 
                pip3 install selenium
                
                export PATH=$PATH:/home/azureuser:/bin
                sudo python3 '$(Pipeline.Workspace)/$(selenium)/ui_automation.py'
    
  - deployment: RunJMeterTests
    dependsOn: DeployJobFakeRestAPI
    displayName: RunJMeterIntegrationTests  
    pool:
        vmImage: $(vmImageName)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:  
          steps:  
          - task: Bash@3
            displayName: 'RunIntegrationTests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                ls
                sudo apt-get update y
                sudo apt-get install python3-pip -y 
                sudo mkdir jmeter
                cd jmeter
                sudo wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz
                sudo tar -xzf apache-jmeter-5.2.1.tgz
                sudo rm apache-jmeter-5.2.1.tgz
                sudo export JMETER_HOME='./jmeter/apache-jmeter-5.2.1/'
                sudo cp -rf '$(Pipeline.Workspace)/$(jmeter)/' .
                sudo cp jmeter/* .
                sudo ls -R jmeter
                sudo ./apache-jmeter-5.2.1/bin/jmeter.sh -n -t Jmeter_tests.jmx -l test_results.csv
                sudo mkdir results
                sudo ./apache-jmeter-5.2.1/bin/jmeter.sh -g test_results.csv -o results 
          - task: PublishTestResults@2
            displayName: 'Publish JMeter Integration test Results'
            inputs:
              testResultsFiles: 'results'
              testResultsFormat: JUnit
              testRunTitle: 'JMeter tests'
              searchFolder: '$(Pipeline.Workspace)/$(jmeter)/'
              mergeTestResults: false
              publishRunAttachments: true 
# stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: BuildJob
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(pythonVersion)'
#       displayName: 'Use Python $(pythonVersion)'
    
#     - script: |
#         python -m venv antenv
#         source antenv/bin/activate
#         python -m pip install --upgrade pip
#         pip install setup
#         pip install -r requirements.txt
#       workingDirectory: $(projectRoot)
#       displayName: "Install requirements"

#     - task: ArchiveFiles@2
#       displayName: 'Archive files'
#       inputs:
#         rootFolderOrFile: '$(projectRoot)'
#         includeRootFolder: false
#         archiveType: zip
#         archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#         replaceExistingArchive: true

#     - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#       displayName: 'Upload package'
#       artifact: drop

# - stage: Deploy
#   displayName: 'Deploy Web App'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeploymentJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: $(environmentName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:
          
#           - task: UsePythonVersion@0
#             inputs:
#               versionSpec: '$(pythonVersion)'
#             displayName: 'Use Python version'

#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App : '
#             inputs:
#               azureSubscription: $(azureServiceConnectionId)
#               appName: $(webAppName)
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip