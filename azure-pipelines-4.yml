# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'bde9a17c-0006-4202-a1ed-14f03d0557fe'
  
  # Azure subscription
  azureSubscription: 'Azure subscription 1 (ef797a3b-ebc6-4c45-a0f0-817c4447b0ef)'

  # Web app name
  webAppName: 'webapp-api-AppService'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # azure deployment vm image name
  myvmImageName: 'myLinuxVM'

  # Environment name
  environmentName: 'webapp-api-AppService'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  
  # Python version: 3.7
  pythonVersion: '3.7'

  # postman resource folder
  postman: 'postman'

  # source fake rest api app file
  fakerestapiapp: 'app.zip'

  # selenium folder
  selenium: 'selenium'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - script: |
          sudo npm install -g newman --unsafe-perm=true --allow-root
          export PATH="/home/vsts/.local/bin:$PATH"
      workingDirectory: '$(build.sourcesdirectory)'
      displayName: 'Install npm on Command Line Script'

    - script: |
          ls
          newman run '$(postman)/Starter_APIs.postman_collection.json' --reporters cli,junit --reporter-junit-export junitReport.xml
          ls
      workingDirectory: '$(build.sourcesdirectory)'
      displayName: 'Run postman tests'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: 'junitReport.xml'
        testResultsFormat: 'JUnit'
        testRunTitle: 'Postman API Test'
        searchFolder: '$(build.sourcesdirectory)'
        mergeTestResults: false
        publishRunAttachments: true 


    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    
    - upload: '$(build.sourcesdirectory)/$(fakerestapiapp)'
      displayName: 'Upload package fakrest api'
      artifact: drop

    - upload: '$(build.sourcesdirectory)/$(selenium)'
      displayName: 'Upload selenium folder'
      artifact: selenium

- stage: Deploy
  displayName: 'Deployment stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJobFakeRestAPI
    pool:
      vmImage: $(vmImageName)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy fake rest api on azure App Service'
            inputs:
              azureSubscription: $(azureSubscription)
              WebAppName: $(webAppName)
              packageForLinux: '$(Pipeline.Workspace)/drop/$(fakerestapiapp)'
              enableCustomDeployment: true
              DeploymentType: runFromZip
  - deployment: DeploySeleniumOnVM
    displayName: 'Deploy Selenium on VM'
    environment:
      name: $(myvmImageName) 
      resourceType: VirtualMachine
      tags: 'test'

    strategy:
      runOnce:
        deploy:  
          steps:  
          - task: Bash@3
            inputs: 
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y 
                sudo apt-get update -y
                sudo apt-get install python3-pip -y 
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser 
                pip3 install selenium
                wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                unzip chromedriver_linux64.zip
                chmod +x chromedriver
                export PATH=$PATH:/home/azureuser:/bin
                python3 ui_automation.py
# stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: BuildJob
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(pythonVersion)'
#       displayName: 'Use Python $(pythonVersion)'
    
#     - script: |
#         python -m venv antenv
#         source antenv/bin/activate
#         python -m pip install --upgrade pip
#         pip install setup
#         pip install -r requirements.txt
#       workingDirectory: $(projectRoot)
#       displayName: "Install requirements"

#     - task: ArchiveFiles@2
#       displayName: 'Archive files'
#       inputs:
#         rootFolderOrFile: '$(projectRoot)'
#         includeRootFolder: false
#         archiveType: zip
#         archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#         replaceExistingArchive: true

#     - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#       displayName: 'Upload package'
#       artifact: drop

# - stage: Deploy
#   displayName: 'Deploy Web App'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeploymentJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: $(environmentName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:
          
#           - task: UsePythonVersion@0
#             inputs:
#               versionSpec: '$(pythonVersion)'
#             displayName: 'Use Python version'

#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App : '
#             inputs:
#               azureSubscription: $(azureServiceConnectionId)
#               appName: $(webAppName)
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip